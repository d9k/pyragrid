{% extends "test_base.jinja2" %}

{% block content %}
    <script src="{{ request.static_url('pyragrid:static/promise.js') }}"></script>
    <script src="{{ request.static_url('pyragrid:static/fetch.js') }}"></script>
    <script src="{{ request.static_url('pyragrid:static/mobx.umd.js') }}"></script>
    <!-- exposed as window.mobxStateTree -->
    <script src="{{ request.static_url('pyragrid:static/mobx-state-tree.umd.js') }}"></script>
    <script src="{{ request.static_url('pyragrid:static/react.js') }}"></script>
    <script src="{{ request.static_url('pyragrid:static/react-dom.js') }}"></script>
    <script src="{{ request.static_url('pyragrid:static/mobx-react.js') }}"></script>

    <div id="helloWorld"></div>

    {% compress 'js' %}
    <script type="text/babel">
{#        import { types, onSnapshot } from "mobx-state-tree"#}

        const Data = mobxStateTree.types.model("Data", {
            number: mobxStateTree.types.number,
            serverTime: mobxStateTree.types.string,
          },
//          {
//            numberInc() {
//              this.number = this.number + 1;
//            },
//            numberSet(newNumber) {
//              this.number = newNumber;
//            }
//          }

//          {
//            toggle() {
//                this.done = !this.done
//            }
//        }
        );

        let getDataFromServer = (callback) => {
          let data = fetch(
            "{{ request.route_url('test_mobx_fetch', _query=dict()) }}",
            {
                credentials: "same-origin"
            }
          ).then( response => {
                if (response.status === 200){
                  return response.json()
                }
                return {};
            }).then( data => {
              callback(data);
          });
        };

        getDataFromServer( data => {
            const Store = mobxStateTree.types.model("Store",
            {
              data: Data
            }
    //          {
    //            todos: types.array(Todo)
    //        }
            );

            const store = Store.create({
              data: {
                number: 10,
                serverTime: data.serverTime
              }
            });

    {#        mobxStateTree.onSnapshot(store, (snapshot) => {#}
    {#          console.dir(snapshot);#}
    {#        });#}

            mobxStateTree.onPatch(store, patch => {
                console.log("Got change: ", patch)
            });

            // unreplayable by actions, BUT easy modification
            mobxStateTree.unprotect(store);
            //store.data.number -= 1;
    {#        store.data.numberInc();#}
    {#        store.data.numberSet(22);#}

            class ShowNumber extends React.Component {
              constructor(props) {
                super(props);
              }
              render() {
                let {number} = this.props;

                return (
                  <span>{number}</span>
                );
              }
            }

            let autoUpdateFromServer = true;

            class HelloWorldWrapper extends React.Component {
              constructor(props) {
                super(props);
              }
              render() {
                let {store} = this.props;

                return (
                  <div>
                    <button onClick={ event => {
                      store.data.number = store.data.number - 1;
                    } }>-</button>&nbsp;
                    <ShowNumber number={store.data.number} />&nbsp;
                    <button onClick={ event => {
                      store.data.number = store.data.number + 1;
                    } }>+</button>&nbsp;
                    <p>updates from server: {store.data.serverTime}</p>
                    <button onClick={ event => {
                      autoUpdateFromServer = !autoUpdateFromServer;
                    }}>Toggle autoupdate from server</button>
                  </div>
                );
              }
            }

            setInterval(() => {
              if (!autoUpdateFromServer){
                  return;
              }
              getDataFromServer(data => {
                  store.data.serverTime = data.serverTime;
              });
            }, 1000);

            let HelloWorldWrapperWithObserver = mobxReact.observer(HelloWorldWrapper);

            ReactDOM.render(
              <HelloWorldWrapperWithObserver store={store} />,
              document.getElementById('helloWorld')
            );

            store.data.number = store.data.number + 1;
            store.data.number = 42;

        });
    </script>
    {% endcompress %}
    {{ content }}

{% endblock %}